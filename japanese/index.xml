<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Schrodin&#39;s Diary on Quantum Computing and Quantum Programming</title>
    <link>https://schrodinteq.github.io/japanese/</link>
    <description>Recent content on Schrodin&#39;s Diary on Quantum Computing and Quantum Programming</description>
    <generator>Hugo</generator>
    <language>japanese</language>
    <lastBuildDate>Tue, 07 Oct 2025 23:47:41 +0900</lastBuildDate>
    <atom:link href="https://schrodinteq.github.io/japanese/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2025年のノーベル物理学賞について簡単に解説</title>
      <link>https://schrodinteq.github.io/japanese/nobelprize2025/</link>
      <pubDate>Tue, 07 Oct 2025 23:47:41 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/nobelprize2025/</guid>
      <description>2025年のノーベル物理学賞受賞者は、John Clarke、 Michel H. Devoret、 John M. Martinisと発表されました！ 彼らの業績は、大きなスケールにおいて「量子トンネル効果」と「量子化されたエネルギー準位の観測」を実証したことにあります。 実証には超伝導回路が使われています。 これについてざっくりと解説します。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 Amazon Braket学習コース また、AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;量子トンネル効果やスケールに依存した物質の振る舞いについて 我々の体や身の回りの物などは微小な電子や原子が集まり構成されています。&#xA;このような微小なスケールの世界で、電子や原子は量子力学に基づいた振る舞いをすることが知られています。この量子力学では我々の常識を超えた現象が起こりえます。その一つがトンネル効果です。&#xA;テニスボールで例を考えます。&#xA;壁にテニスボールを何度も当てることを考えましょう。壁の向こう側にテニスボールが行くことは無いように思えます。つまり、我々の常識的には、テニスボールが壁をすり抜ける確率は0である、とはっきり言えそうです。&#xA;しかし量子力学の理論によると、電子や、原子といったスケールにおいては、このような壁をすり抜ける確率が有限であることが示されています。これはつまり量子力学によると、常識的にはすり抜けることができない壁を、ある確率ですり抜けることができるということを意味しています。&#xA;実際に、単一粒子や極めて小さな系ではトンネル効果が確認されていました。&#xA;しかし世界中で、長い間プレーされている、テニス、卓球などについて、壁どころか、一度もボールがネットをすり抜けた！という現象を観たことがある人はいません。&#xA;このように、系のスケールが大きくなるにつれて量子力学的な効果は途端に確認しづらくなります。&#xA;今回のノーベル物理学賞について John Clarke、Michel H. Devoret、John M. Martinisらは、超伝導と呼ばれる量子力学特有の状態を活用した回路、つまり超伝導回路を用いることで、大きなスケールでトンネル効果を観測できることを実証し、この実験に対してノーベル物理学賞が授与されています。&#xA;つまり、「量子力学で通常は極小スケールでしか現れない奇妙な現象を、手で触れられるようなサイズのシステムで示した」ことが評価されています。&#xA;実際に、彼らの研究では、単一粒子という小さい規模でなく、数十億個の電子の粒が、まるで一つの巨大な粒のようにふるまい、トンネル効果を起こしている(直感的には壁をすり抜けている)ことを実証しています。&#xA;また、特定の波長のマイクロ波を照射して、系が「離散的なエネルギー準位を吸収・放出する」様子も確認しています。エネルギーがとびとびの値を持ちうるというのも量子力学特有の効果です。&#xA;量子コンピューターとの関連について さらに、John M. Martinisは、後にこの手法を使って 超伝導量子ビット（qubit） を実現する研究に取り組んでいます。 この研究では、ここまで紹介した超伝導回路がとびとびのエネルギーを持つことを利用しています。 量子コンピュータを構成する量子ビットは、我々が普段利用しているコンピュータのビットと同様に、0または1どちらの状態にも遷移できなければなりません。 彼は、ここまで紹介した超伝導回路がとびとびのエネルギーを持つことを利用して、最も低いエネルギー状態とその次に高いエネルギーを持つ状態をそれぞれ0と1として機能させることに成功しています。&#xA;IBMやGoogle、rigettiなどは超伝導回路を使った量子コンピュータを実用化していますが、このような大きなスケールでの量子力学特有の振る舞いを実証したことにより、現在の規模の量子コンピュータが実現していることは間違い無いでしょう。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 Amazon Braket学習コース また、AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！</description>
    </item>
    <item>
      <title>IBM 量子開発者認定資格 v2.X sample問題集の解説 その2</title>
      <link>https://schrodinteq.github.io/japanese/ibmcertsamplev2x02/</link>
      <pubDate>Tue, 23 Sep 2025 17:10:38 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/ibmcertsamplev2x02/</guid>
      <description>新しいQiskitのバージョンに対応した資格である、「IBM Certified Quantum Computation using Qiskit v2.X Developer - Associate」がリリースされました。&#xA;この資格を取得することでqiskitや量子プログラミングに関する知識を証明することが可能です。&#xA;この認定を得るためには、上記リンクに記載がある通り、“Exam C1000-179: Fundamentals of Quantum Computing Using Qiskit v2.X Developer”という試験に合格する必要があります。 IBMはこの試験に関するsample問題集も公開しており、上記URLリンク内の「Sample Test」で公開されています。 ただ、こちらのSample問題集では解説は特に記載されていないため、なるべく分かりやすく解説を記載します。このページでは11 ~ 21問までの解説を記載しています。1 ~ 10問の解説についてはこちらのページをご参照ください。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 Amazon Braket学習コース また、AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;問題11: Which code fragment is the correct way to open a session?&#xA;選択肢:&#xA;A. from qiskit_ibm_runtime import Session session = Session(system=&amp;#39;ibm_foo&amp;#39;) B. from qiskit_ibm_runtime import execute, QiskitRuntimeService service = QiskitRuntimeService() session = execute(service=service) C.</description>
    </item>
    <item>
      <title>IBM 量子開発者認定資格 v2.X sample問題集の解説 その1</title>
      <link>https://schrodinteq.github.io/japanese/ibmcertsamplev2x01/</link>
      <pubDate>Sun, 21 Sep 2025 20:41:13 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/ibmcertsamplev2x01/</guid>
      <description>2025年、新しいQiskitのバージョンに対応した資格である、「IBM Certified Quantum Computation using Qiskit v2.X Developer - Associate」がリリースされました。&#xA;この資格を取得することでqiskitや量子プログラミングに関する知識を証明することが可能です。&#xA;この認定を得るためには、上記リンクに記載がある通り、“Exam C1000-179: Fundamentals of Quantum Computing Using Qiskit v2.X Developer”という試験に合格する必要があります。 IBMはこの試験に関するsample問題集も公開しており、上記URLリンク内の「Sample Test」で公開されています。 ただ、こちらのSample問題集では解説は特に記載されていないため、なるべく分かりやすく解説を記載します。このページでは1 ~ 10問までの解説を記載しています。11 ~ 21問の解説についてはこちらのページをご参照ください。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 Amazon Braket学習コース また、AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;問題1: Which one of the following code fragments will generate the given output?&#xA;[[ 1.+0.j 0.+0.j 0.+0.j 0.+0.j] [ 0.+0.j -1.+0.j 0.+0.j 0.+0.j] [ 0.</description>
    </item>
    <item>
      <title>AWSのAmazon Braketでショアのアルゴリズム</title>
      <link>https://schrodinteq.github.io/japanese/awsbraketshor/</link>
      <pubDate>Sun, 20 Jul 2025 12:00:33 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/awsbraketshor/</guid>
      <description>これまでの記事では以下の内容を学びました：&#xA;量子フーリエ変換を具体例で理解 Qiskit 2.0で逆量子フーリエ変換 Amazon Braket SDKで逆量子フーリエ変換 Qiskit 2.0で量子位相推定 Amazon Braket SDKで量子位相推定 これらを踏まえてRSA暗号や、ビットコインのトランザクションで利用されるECDSA暗号を破ると言われている量子アルゴリズムであるショアのアルゴリズムについて学びます。&#xA;Amazon Braket学習コース この記事で登場する、量子ゲートや量子回路など、量子コンピュータの基本的な知識や、Amazon Braketの使い方についてはこちらのコースで効率的に学べます。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 ショアのアルゴリズム 量子コンピューターで十分な数の量子ビットが扱えるようになった場合、ショアのアルゴリズムでRSA暗号や、ECDSA暗号が破られる危険性があると言われています。 例えばRSA暗号は大きな数の素因数分解が困難であることを利用した暗号方式ですが、今回はショアのアルゴリズムで素因数分解を行う例についてみていきましょう。 このアルゴリズムを用いて整数$N$の素因数分解を行う際の流れは以下の通りです。 $1 &amp;lt; a &amp;lt; N$ かつ$ N$との最大公約数が $1$ となる$a$を選ぶ $\downarrow$ $a^x\bmod\ N$ という関数の周期 $r$を見つける $\downarrow$ $a^{\frac{r}{2}} \pm 1$の最大公約数からNの素因数を求める ここで&amp;quot;$a^x\bmod\ N$ という関数の周期 $r$を見つける&amp;quot;と記載されていますが、具体例を見ていきましょう。&#xA;例として$N=39$を素因数分解する際に、$a=5$を選んだ場合について考えます。$a^x\bmod\ N\ =\ 5^x\bmod\ 39$のグラフは$x$を横軸とすると次の通りとなります。&#xA;y軸の値を書き出すと以下の通りで、4回の変化を通じて元の値に戻る周期関数であることがわかります。&#xA;$$ 1 \rightarrow 5 \rightarrow 25 \rightarrow 8 \rightarrow 1 \rightarrow 5 \rightarrow 25 \rightarrow 8 \tag{1} $$</description>
    </item>
    <item>
      <title>Qiskit 2.0で量子位相推定（Quantum Phase Estimation）</title>
      <link>https://schrodinteq.github.io/japanese/qiskit20qpe/</link>
      <pubDate>Thu, 26 Jun 2025 14:31:58 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/qiskit20qpe/</guid>
      <description>これまでの記事では以下の内容を学びました：&#xA;量子フーリエ変換を具体例で理解 Qiskit 2.0で逆量子フーリエ変換 Amazon Braket SDKで逆量子フーリエ変換 Amazon Braketで量子位相推定 今回はQiskit 2.0を用いて、量子位相推定を実行します。&#xA;Amazon Braket学習コース この記事で登場する、量子ゲートや量子回路など、量子コンピュータの基本的な知識や、Amazon Braketの使い方についてはこちらのコースで効率的に学べます。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 Qiskit 2.0で量子位相推定 今回は対象のユニタリ行列を$S$ゲート、固有状態を$\ket{1}$として実装してみましょう。 つまり量子位相推定により$\ket{1}$に対する$S$ゲートの固有値を求めます。暗算でもこの固有値の結果は算出できるかもしれませんが、あえて分からないふりをして進めていきましょう。 まずは必要となる関数をimportします。&#xA;from qiskit import QuantumCircuit from qiskit.primitives import StatevectorSampler from qiskit.circuit.library import QFT from qiskit.circuit.library import SGate samplerを定義します。&#xA;sampler = StatevectorSampler() 量子回路を定義します。今回読み出しレジスタの量子ビット数は3とします。&#xA;n_qubits = 4 n_readout_qubits = n_qubits - 1 qc = QuantumCircuit(n_qubits, n_readout_qubits) 読み出しレジスタの量子ビットにはHゲートを書けるのでした。&#xA;for qubit in list(range(n_readout_qubits)): qc.</description>
    </item>
    <item>
      <title>AWSのAmazon Braketで量子位相推定（Quantum Phase Estimation）</title>
      <link>https://schrodinteq.github.io/japanese/awsbraketqpe/</link>
      <pubDate>Fri, 20 Jun 2025 15:17:02 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/awsbraketqpe/</guid>
      <description>これまでの記事では以下の内容を学びました：&#xA;量子フーリエ変換を具体例で理解 Qiskit 2.0で逆量子フーリエ変換 Amazon Braket SDKで逆量子フーリエ変換 今回はそれらを踏まえて、量子位相推定について解説します。&#xA;Amazon Braket学習コース この記事で登場する、量子ゲートや量子回路など、量子コンピュータの基本的な知識や、Amazon Braketの使い方についてはこちらのコースで効率的に学べます。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 Amazon Braket SDKで量子位相推定 これまでの記事で、逆量子フーリエ変換により、位相を含めた量子状態を判別できることを学びました。 この性質をうまく利用して量子アルゴリズムを設計できないでしょうか？ 実は量子位相推定アルゴリズムではこの性質が活用されています。 このアルゴリズムはユニタリ演算子$ U $とその固有状態$|\psi\rangle$が与えられているとき、 $\phi$を$\phi \approx 0.\phi_1\phi_2\ldots\phi_n = \sum_{k=1}^{n} \frac{\phi_k}{2^k}$の形で推定します。ただしnは読み出しレジスタの量子ビット数です。 $$ U |\psi\rangle = e^{2\pi i \phi} |\psi\rangle \quad (\phi \in [0, 1)) $$ このアルゴリズムの流れは以下の通りです。 $\phi$の情報を持った量子フーリエ変換後の状態をうまく作り出す $\downarrow$ 出来上がった状態を逆量子フーリエ変換することで$\phi$の情報を取り出す 理論の流れを見ていきましょう。まずは$\phi$の情報を持った量子フーリエ変換後の状態をうまく作り出すことを考えていきます。 ある$n+1$量子ビットの初期状態はいつもの通り以下となります。 $$ |0\rangle^{\otimes n+1} $$ 固有状態を作らないと$\phi$の値も登場できないので末尾のビットを$U$の固有状態$|\psi\rangle$に変換しましょう。 $$ |0\rangle^{\otimes n} \otimes |\psi\rangle $$ 今回の目的は$\phi$の情報を持った量子フーリエ変換後の状態を作り出すことにあります。 量子フーリエ変換$\mathcal{F}$の定義を思い出すと。 $$ \mathcal{F} \ket{j} = \frac{1}{\sqrt{2^n}} \sum_{k=0}^{2^n-1} e^{2\pi i jk / 2^n} \ket{k} $$ $|0\rangle^{\otimes n}$のビット列は今回読み出しレジスタと呼びますが、こちらにHゲートを適用すれば以下の通り少し量子フーリエ変換後の形に近づきます。 $$ \left( H^{\otimes n} |0\rangle^{\otimes n} \right) \otimes |\psi\rangle = \frac{1}{\sqrt{2^n}} \sum_{k=0}^{2^n - 1} |k\rangle \otimes |\psi\rangle $$ 量子フーリエ変換の式と現在の状態を見比べると、量子フーリエ変換の式では$|k\rangle$に、$k$に依存した位相因子がかけられていることがわかります。これは$|k\rangle$を制御ビットとした制御$U$ゲート$\mathrm{C}\text{-}U$を適用することで得られます。 $$ \begin{align} \mathrm{C}\text{-}U \left( \frac{1}{\sqrt{2^n}} \sum_{k=0}^{2^n - 1} |k\rangle \otimes |\psi\rangle \right) &amp;amp;= \frac{1}{\sqrt{2^n}} \sum_{k=0}^{2^n - 1} |k\rangle \otimes U^k |\psi\rangle \\ &amp;amp;= \frac{1}{\sqrt{2^n}} \sum_{k=0}^{2^n - 1} e^{2\pi i \phi k} |k\rangle \otimes |\psi\rangle \end{align} \tag{1} $$ かなり量子フーリエ変換の式に近づきました！ここで逆量子フーリエ変換$\mathcal{F}^{-1}$の定義についても思い出してみましょう。 $$ \mathcal{F}^{-1} \left( \frac{1}{\sqrt{2^n}} \sum_{k=0}^{2^n-1} e^{2\pi i jk / 2^n} \ket{k} \right) = \ket{j} $$ 逆量子フーリエ変換を適用することでかなりシンプルになりますね。同様に今回導いた式の読み出しレジスタの部分を逆量子フーリエ変換すればシンプルな形となるはずです。式で表すと以下の通りとなります。 $$ \left( \mathcal{F}^{-1} \left( \frac{1}{\sqrt{2^n}} \sum_{k=0}^{2^n - 1} e^{2\pi i \phi k} |k\rangle \right) \right) \otimes |\psi\rangle = |2^n\phi\rangle \otimes |\psi\rangle $$ ここまで変形した後に、読み出しレジスタを観測すれば$|2^n\phi\rangle$の形で$\phi$が観測できるはずです！ ただし、量子位相推定では$\phi$が2進数でちょうど$n$量子ビットで表せない場合は、近似値に重なった状態になることに注意が必要です。</description>
    </item>
    <item>
      <title>AWSのAmazon Braketで逆量子フーリエ変換</title>
      <link>https://schrodinteq.github.io/japanese/awsbraketqft/</link>
      <pubDate>Sun, 15 Jun 2025 18:44:45 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/awsbraketqft/</guid>
      <description>別の記事でQiskitにより逆量子フーリエ変換を行い、元々の量子状態を判別できることについて説明しました。今回はAmazon Braket SDKのアルゴリズムライブラリを用いることで逆量子フーリエ変換を実行し、元々の量子状態を判別します。&#xA;Amazon Braket学習コース この記事で登場する、量子ゲートや量子回路など、量子コンピュータの基本的な知識や、Amazon Braketの使い方についてはこちらのコースで効率的に学べます。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;AWSのAmazon Braketで逆量子フーリエ変換 別の記事の例で、ある2量子ビットが$\psi_1 = \frac{1}{2} \left( \ket{00} + i\ket{01} - \ket{10} - i\ket{11} \right)$もしくは$\psi_2 = \frac{1}{2} \left( \ket{00} - \ket{01} + \ket{10} - \ket{11} \right)$どちらかの状態で存在していた場合、逆量子フーリエ変換を用いることで、どちらの状態か判別可能と説明しました。また、こちらの記事ではQiskit 2.0を用いその実装を行いました。 今回はAmazon Braket SDKで実際に逆量子フーリエ変換を行い、元々の量子状態が判別できることを確認します。 まずは必要となる関数をimportします。&#xA;from braket.circuits import Circuit from braket.devices import LocalSimulator from braket.experimental.algorithms.quantum_fourier_transform import ( quantum_fourier_transform as qft_module ) 量子回路を定義します。&#xA;n_qubits = 2 circ = Circuit() 前回と同様に今回も$\psi_2$を事前に定義し、逆量子フーリエ変換を実行しましょう。 ここで、前回Qiskitで実施した際の逆量子フーリエ変換の回路と、今回Amazon Braket SDKのアルゴリズムライブラリで用いられる逆量子フーリエ変換の回路はそれぞれ以下の通り逆になっております。 前回のQiskitの記事における量子フーリエ変換の回路図 今回のAmazon Braket SDKにおける量子フーリエ変換の回路図</description>
    </item>
    <item>
      <title>Qiskit 2.0で逆量子フーリエ変換</title>
      <link>https://schrodinteq.github.io/japanese/qiskit20qft/</link>
      <pubDate>Wed, 11 Jun 2025 11:24:27 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/qiskit20qft/</guid>
      <description>前回の記事では量子フーリエ変換の具体例やメリットについて確認しました。 今回の記事ではQiskit 2.0で実際に逆量子フーリエ変換を実行し、元々の量子状態が判別できることを確認します。&#xA;Amazon Braket学習コース 量子コンピュータの基本的な知識や、Amazon Braketの使い方についてはこちらのコースで効率的に学べます。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 Qiskit 2.0で逆量子フーリエ変換 前回の記事の例で、ある2量子ビットが$\psi_1 = \frac{1}{2} \left( \ket{00} + i\ket{01} - \ket{10} - i\ket{11} \right)$もしくは$\psi_2 = \frac{1}{2} \left( \ket{00} - \ket{01} + \ket{10} - \ket{11} \right)$どちらかの状態で存在していた場合、逆量子フーリエ変換を用いることで、どちらの状態か判別可能と説明しました。 今回はQiskitで実際に逆量子フーリエ変換を行い、元々の量子状態が判別できることを確認します。 まずは必要となる関数をimportします。&#xA;from qiskit import QuantumCircuit from qiskit.circuit.library import StatePreparation from qiskit.primitives import StatevectorSampler from qiskit.circuit.library import QFT Samplerや、量子回路定義します。&#xA;sampler = StatevectorSampler() n_qubits = 2 qc = QuantumCircuit(n_qubits, 2) 今回対象とする量子ビットの状態は$\psi_2$とし、この状態を生成する量子回路を以下でappendします。</description>
    </item>
    <item>
      <title>量子フーリエ変換を具体例で分かりやすく</title>
      <link>https://schrodinteq.github.io/japanese/learnqfteasily/</link>
      <pubDate>Sun, 08 Jun 2025 16:26:45 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/learnqfteasily/</guid>
      <description>この記事では量子フーリエ変換の具体的な例をみることで直感的な理解を深めます。&#xA;Amazon Braket学習コース 量子コンピュータの基本的な知識や、Amazon Braketの使い方についてはこちらのコースで効率的に学べます。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子フーリエ変換 $n$量子ビットにおける量子フーリエ変換$\mathcal{F}$は式で次のように表せます。 $$ \mathcal{F} \ket{j} = \frac{1}{\sqrt{2^n}} \sum_{k=0}^{2^n-1} e^{2\pi i jk / 2^n} \ket{k} $$&#xA;また量子フーリエ変換はユニタリ変換であり、逆量子フーリエ変換は次のように表せることも触れておきます。 $$ \mathcal{F}^{-1} \ket{k} = \mathcal{F}^\dagger \ket{k} = \frac{1}{\sqrt{2^n}} \sum_{j=0}^{2^n-1} e^{-2\pi i jk / 2^n} \ket{j} $$&#xA;量子フーリエ変換の具体例 1量子ビットの場合 $\ket{0}$という状態を量子フーリエ変換してみましょう。&#xA;$$ \mathcal{F} \ket{0} = \frac{1}{\sqrt{2}} ( \ket{0} + \ket{1} ) $$ このように、$\ket{0}$は位相がずれていない状態の重ね合わせとなることが分かります。 $\ket{1}$という状態を量子フーリエ変換してみましょう。&#xA;$$ \mathcal{F} \ket{1} = \frac{1}{\sqrt{2}} ( \ket{0} + e^{\pi i} \ket{1} ) = \frac{1}{\sqrt{2}} ( \ket{0} - \ket{1} ) $$ このように、$\ket{1}$を量子フーリエ変換すると位相が反転された状態（πずれている状態）の重ね合わせとなることが分かります。</description>
    </item>
    <item>
      <title>AWSのAmazon Braketで量子機械学習：QCBM</title>
      <link>https://schrodinteq.github.io/japanese/awsquantummachinelearning/</link>
      <pubDate>Mon, 02 Jun 2025 12:53:26 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/awsquantummachinelearning/</guid>
      <description>別の記事に記載の通り、AWSの量子コンピューティングサービスであるAmazon Braketにおいては、Amazon Braket SDKと呼ばれる量子コンピューティングSDKを用いて各サービスを簡単に利用可能となります。この記事では、量子コンピュータを用いた機械学習である、量子機械学習アルゴリズムを実行する方法について説明します。&#xA;Amazon Braket学習コース この記事で登場する、量子ゲートや量子回路など、量子コンピュータの基本的な知識や、Amazon Braketの使い方についてはこちらのコースで効率的に学べます。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;AWSのAmazon Braketで量子機械学習: QCBM 量子機械学習アルゴリズムはいくつかの方法が提案されておりますが、今回はQuantum Circuit Born Machine (QCBM)を実行します。 このアルゴリズムは、教師なし学習による生成モデルを構築できAmazon Braketのアルゴリズムライブラリに既に用意されています。&#xA;https://github.com/amazon-braket/amazon-braket-algorithm-library/tree/main/src/braket/experimental/algorithms/quantum_circuit_born_machine 今回はこちらのライブラリを使用します。&#xA;環境準備 まずは環境準備です。Amazon Braket Notebook上で実行する場合は特に実施する必要はありませんが、ご自身のPCや、サーバ上で実施する場合は、Amazon Braket SDKと、Jupyter Notebookをインストールします。またAmazon Braketアルゴリズムライブラリを利用するため、今回追加で以下も実行しています。以降の手順はJypyter Notebook上で実行しています。&#xA;git clone https://github.com/amazon-braket/amazon-braket-algorithm-library.git cd amazon-braket-algorithm-library pip install . 今回学習対象とするデータについて 4量子ビットが存在した場合、$2^4$通りのビット配列が表現可能です。このビット配列の中央付近にピークを持つガウス分布は以下で生成可能です。&#xA;import numpy as np n_qubits = 4 def gaussian(n_qubits, mu, sigma): x = np.arange(2**n_qubits) gaussian = 1.0 / np.sqrt(2 * np.pi * sigma**2) * np.</description>
    </item>
    <item>
      <title>Amazon Braketアルゴリズムライブラリインポート時のエラーについて</title>
      <link>https://schrodinteq.github.io/japanese/braketexperimenterror/</link>
      <pubDate>Sat, 31 May 2025 20:53:35 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/braketexperimenterror/</guid>
      <description>Amazon Braket学習コース AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;braket.experimentalのimportエラー 既に別の記事で紹介した通り、Amazon Braketではアルゴリズムライブラリを用いることで簡単に、量子フーリエ変換や、量子機械学習などのアルゴリズムが実行可能です。&#xA;しかし、Amazon Braket SDKをローカルにインストールし、pythonでimportしようとすると次のようなエラーが出力される場合があります。&#xA;--------------------------------------------------------------------------- ModuleNotFoundError Traceback (most recent call last) Cell In[2], line 4 2 import numpy as np 3 from braket.devices import LocalSimulator ----&amp;gt; 4 from braket.experimental.algorithms.quantum_circuit_born_machine import QCBM, mmd_loss 5 get_ipython().run_line_magic(&amp;#39;matplotlib&amp;#39;, &amp;#39;inline&amp;#39;) ModuleNotFoundError: No module named &amp;#39;braket.experimental&amp;#39; このエラーはhttps://github.com/amazon-braket/amazon-braket-algorithm-library.gitに記載があるように、ローカルで以下を実行し、Amazon Braket algorithm libraryをインストールすることで解決します。&#xA;git clone https://github.com/amazon-braket/amazon-braket-algorithm-library.git cd amazon-braket-algorithm-library pip install . このインストールにより、様々なAmazon Braket algorithm libraryが使えるようになります。</description>
    </item>
    <item>
      <title>Amazon Braket SDKをインストールし、Jupyter Notebookで量子回路を実行する</title>
      <link>https://schrodinteq.github.io/japanese/installrunbraketsdk/</link>
      <pubDate>Mon, 26 May 2025 15:39:10 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/installrunbraketsdk/</guid>
      <description>別の記事に記載の通り、AWSの量子コンピューティングサービスであるAmazon Braketにおいては、Amazon Braket SDKと呼ばれる量子コンピューティングSDKを用いて各サービスを簡単に利用可能となります。 この記事ではAmazon Braket SDKをインストールし、Jypyter Notebook上で実行する方法について説明します。&#xA;Amazon Braket学習コース 本記事で言及されている、Amazon Braketについてより深く学びたい方へ、Amazon Braket学習コースの紹介です。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;Amazon Braket SDKをインストールし、Jupyter Notebookで量子回路を実行する Amazon Braket SDKはAWSが提供する量子コンピューティングSDKで、pythonにより実行可能です。このSDKにより量子回路の記述や、実行が可能となります。&#xA;Amazon Braket SDKはAmazon Braket NotebookというAWS上のJupyter Notebookインスタンスから簡単に実行可能ですが、今回はこのAmazon Braket SDKを自分のPCや、サーバに直接インストールして実行する方法について説明します。&#xA;環境はWindows 10で、pythonはPython 3.9.9を利用しています。 まずはうまくいかなかった例についてです。 以下コマンドでAmazon Braket SDKをインストールしました。&#xA;pip install amazon-braket-sdk[braket-air,notebook] jupyter notebookコマンドで環境を起動後、以下コードを実行してみます。&#xA;from braket.circuits import Circuit from braket.devices import LocalSimulator circuit = Circuit().h(0).measure(0) device = LocalSimulator() result = device.run(circuit, shots=1000).result() counts = result.</description>
    </item>
    <item>
      <title>Qiskit 2.0をインストールして簡単な量子回路を実行する</title>
      <link>https://schrodinteq.github.io/japanese/qiskit20/</link>
      <pubDate>Thu, 22 May 2025 17:36:41 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/qiskit20/</guid>
      <description>Qiskit 2.0がリリースされました。この記事ではqiskit 2.0.1で簡単な量子回路を実行する方法を説明します。&#xA;Amazon Braket学習コース AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 qiskit 2.0.1をインストールして簡単な量子回路を実行する この記事を書いてる時点での最新版であるqiskitのバージョンは2.0.1であったため、これをインストールし、簡単な量子回路を実行します。 環境は以下の通り用意しました。&#xA;pip install qiskit==2.0.1 notebook numpy 今回の記事ではStatevectorSamplerを用いて量子回路を実行します。その他必要となるモジュールと合わせてimportしておきます。&#xA;from qiskit.circuit import ( Parameter, QuantumCircuit ) from qiskit.primitives import StatevectorSampler samplerを定義します。&#xA;sampler = StatevectorSampler() いつも通り量子回路を定義します。今回はベルの回路を定義してます。&#xA;qc = QuantumCircuit(2, 2) qc.h(0) qc.cx(0, 1) qc.measure([0,1], [0,1]) Qiskitでは量子回路と同時に複数のパラメータを定義し、samplerで一気に実行可能です。 ただし、今回はパラメータ依存のゲートもないため、パラメータを定義しないNoneとして実行します。&#xA;pub = (qc, None) job = sampler.run([pub], shots=100) 以下の様に結果を確認できます。&#xA;result = job.</description>
    </item>
    <item>
      <title>Amazon BraketでQiskitを利用する</title>
      <link>https://schrodinteq.github.io/japanese/awsbraketqiskit/</link>
      <pubDate>Tue, 20 May 2025 11:47:16 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/awsbraketqiskit/</guid>
      <description>この記事ではAWSが提供する量子コンピューティングサービスの1つである、Amazon Braket NotebookからQiskitを利用する方法について説明します。&#xA;Amazon Braket学習コース AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;Amazon Braket NotebookからQiskitを実行する AWSが提供する量子コンピューティングサービスの1つである、Amazon Braket Notebookインスタンスには、Amazon Braket SDK、Qiskit、Pennylaneなどの量子コンピューティングSDKが既に利用できる状態でインストールされています。 今回はQiskitを用いて簡単な回路を実行します。 まずはAmazon Braket Notebookインスタンスを起動し、新しいファイルを開きます。 Amazon Braket Notebookインスタンスは、起動時間に応じて料金が発生するので注意しましょう。 以下の様に通常のQiskitと同様にモジュールをインポートできます。&#xA;import qiskit from qiskit import QuantumCircuit この記事を書いている時点では、Qiskit1.2.0がデフォルトでインストールされています。&#xA;print(qiskit.__version__) #1.2.0 量子回路もいつも通り定義できます。今回はベルの回路を作成しています。&#xA;circuit = QuantumCircuit(2) circuit.h(0) circuit.cx(0, 1) 量子回路の実行方法は、通常のQiskitと記載の仕方が異なります。以下はローカルシミュレータ利用時のコードです。 local_simulatorという変数にバックエンドを定義し、実行しています。100回の実行としています。&#xA;from qiskit_braket_provider import BraketLocalBackend local_simulator = BraketLocalBackend() local_task = local_simulator.run(circuit, shots=100) 結果の確認方法は通常のQiskitと同様です。&#xA;print(local_task.result().get_counts()) #{&amp;#39;11&amp;#39;: 44, &amp;#39;00&amp;#39;: 56} ヒストグラムもいつも通り以下で確認できます。&#xA;from qiskit.</description>
    </item>
    <item>
      <title>Amazon BraketのAccessDeniedException</title>
      <link>https://schrodinteq.github.io/japanese/braketexrole/</link>
      <pubDate>Mon, 19 May 2025 10:58:25 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/braketexrole/</guid>
      <description>Amazon Braket学習コース AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;Amazon BraketのAccessDeniedException Amazon BraketでSV1、 TN1、 DM1シミュレータや量子コンピュータを実行しようとした際に以下のようなエラーが出力されることがあります。&#xA;--------------------------------------------------------------------------- AccessDeniedException Traceback (most recent call last) Cell In[12], line 6 3 ghz = ghz_circuit(n_qubits) 5 # run GHZ circuit on SV1 ----&amp;gt; 6 result = device.run(ghz, shots=1000).result() 7 counts = result.measurement_counts 8 print(counts) File ~/anaconda3/envs/Braket/lib/python3.10/site-packages/braket/aws/aws_device.py:207, in AwsDevice.run(self, task_specification, s3_destination_folder, shots, poll_timeout_seconds, poll_interval_seconds, inputs, gate_definitions, reservation_arn, *aws_quantum_task_args, **aws_quantum_task_kwargs) 205 if self.</description>
    </item>
    <item>
      <title>Amazon Braketのメモリ不足によるエラー</title>
      <link>https://schrodinteq.github.io/japanese/braketmemerr/</link>
      <pubDate>Thu, 15 May 2025 21:25:15 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/braketmemerr/</guid>
      <description>Amazon Braket学習コース AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;Amazon Braketローカルシミュレータのメモリ不足によるエラー AWSの量子コンピューティングサービスであるAmazon Braketで、ローカルシミュレータを実行すると以下のエラーが出力される場合があります。&#xA;--------------------------------------------------------------------------- MemoryError Traceback (most recent call last) Cell In[11], line 2 1 device = LocalSimulator() ----&amp;gt; 2 result = device.run(myqc, shots=1000).result() 3 counts = result.measurement_counts 4 plt.bar(counts.keys(), counts.values()) File ~/anaconda3/envs/Braket/lib/python3.10/site-packages/braket/devices/local_simulator.py:126, in LocalSimulator.run(self, task_specification, shots, inputs, *args, **kwargs) 124 task_specification = self._apply_noise_model_to_circuit(task_specification) 125 payload = self._construct_payload(task_specification, inputs, shots) --&amp;gt; 126 result = self.</description>
    </item>
    <item>
      <title>Amazon Braketとは</title>
      <link>https://schrodinteq.github.io/japanese/whatisamazonbraket/</link>
      <pubDate>Sat, 10 May 2025 19:02:57 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/whatisamazonbraket/</guid>
      <description>この記事ではAWSが提供する量子コンピューティングサービスである、Amazon Braketの概要について、個人的に感じるメリットも記載しながら説明します。&#xA;Amazon Braket学習コース AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;Amazon Braketの概要 Amazon BraketはAWSが提供する量子コンピューティングサービスで、以下の機能を提供します。&#xA;Amazon Braket Notebookの利用 Amazon Braketマネージドシミュレータの実行 複数のプロバイダーが提供する量子コンピュータの実行 ハイブリッドジョブ機能 アルゴリズムライブラリの利用 それぞれの項目についてより具体的な内容を記載します。 Amazon Braket Notebookの利用 Amazon Braketでは、Amazon Braket Notebookインスタンスを作成、起動し、利用することができます。 これにより簡単にJupyter Notebookベースの開発環境を用意することができ、量子プログラミングをすぐさま始められます。&#xA;特にこの環境ではQiskitやPennyLane、Amazon Braket SDKなどの量子コンピューティングSDKが起動直後からほ利用できる状態でインストールされているという点が便利です。 量子コンピューティングSDKの発展は著しく、バージョン差異による影響でコードを書いてもエラーが発生するケースがよく見受けられます。 Amazon Braket Notebookでは、起動後のインスタンスに既に用意されているチュートリアルに従えば、確実にエラー無く量子回路を実行することができます。 この扱いやすさは一つのメリットと言えるでしょう。&#xA;さらに、このAmazon Braket Notebookから、後ほど紹介するAmazon Braketマネージドシミュレータの実行や量子コンピュータが簡単に実行できるのも利点です。 また料金について、Amazon braket notebookの起動時間に依存して課金が発生する仕組みとなっているようで起動時間に注意が必要そうです。 Amazon Braketマネージドシミュレータの実行 先ほど紹介したAmazon Braket Notebookのローカルシミュレータを利用すれば量子回路は簡単に実行可能です。 しかしながら、量子回路における量子ビットを増やしていった時にローカルシミュレータでは実行しきれないケースも出てくるかと思います。 ここで、Amazon Braketマネージドシミュレータを用いることで、Amazon Braket Notebookや、ローカルのPCでは実行できないような規模の量子回路を実行可能となります。 利用可能なシミュレータとざっくりの説明は以下の通りです。&#xA;Simulator Description SV1 (State Vector Simulator) ローカルシミュレータより多くの量子ビットでシミュレート可能 TN1 (Tensor Network Simulator) SV1より大規模な量子ビットでシミュレート可能 DM1 (Density Matrix Simulator) ノイズあり、つまりより本物の量子コンピュータに近い環境でシミュレート可能 料金については、どのシミュレータも実行時間に依存して料金が発生する仕組みとなっているようです。 複数のプロバイダーが提供する量子コンピュータの実行 AWSマネージドシミュレータと同様にAmazon Braket Notebook経由で、簡単に様々な種類の量子コンピュータが実行可能となります。 2025年5月現在、以下プロバイダーの量子コンピュータを利用できます。</description>
    </item>
    <item>
      <title>pythonの仮想環境により任意のqiskitのバージョンを実行する。</title>
      <link>https://schrodinteq.github.io/japanese/venv/</link>
      <pubDate>Thu, 17 Apr 2025 20:34:31 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/venv/</guid>
      <description>はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 Amazon Braket学習コース AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;任意のqiskitのバージョンの実行 IBMが提供している量子コンピュータに関する資格「IBM Certified Associate Developer - Quantum Computation using Qiskit v0.2X」についてサンプル問題が公開されています。このサンプル問題集には以下のコードが記載されています。&#xA;from qiskit import QuantumCircuit, execute, BasicAer backend = BasicAer.get_backend(&amp;#39;qasm_simulator&amp;#39;) qc = QuantumCircuit(3) execute(qc, backend, shots=1024, coupling_map=[[0,1], [1,2]]) これを実行すると次のようなエラーが出ます。&#xA;ImportError: cannot import name &amp;#39;execute&amp;#39; from &amp;#39;qiskit&amp;#39; もしくは&#xA;ImportError: cannot import name &amp;#39;BasicAer&amp;#39; from &amp;#39;qiskit&amp;#39; 他のサンプルコードを実行した際も以下のようなエラーが出ます。&#xA;from qiskit import QuantumCircuit, Aer, execute from math import sqrt qc = QuantumCircuit(2) v = [1/sqrt(2), 0, 0, 1/sqrt(2)] qc.</description>
    </item>
    <item>
      <title>IBM 量子開発者認定資格 sample問題集の解説 その2</title>
      <link>https://schrodinteq.github.io/japanese/ibmcertsample02ja/</link>
      <pubDate>Sat, 12 Oct 2024 20:23:00 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/ibmcertsample02ja/</guid>
      <description>ご注意: このページで紹介している内容は旧バージョンの試験向けです。&#xA;新しいバージョンの試験に対応したサンプル問題解説については、「IBM 量子開発者認定資格 v2.X sample問題集の解説 その1」をご覧ください。&#xA;IBMが提供している量子コンピュータに関する資格「IBM Certified Associate Developer - Quantum Computation using Qiskit v0.2X」を取得するためには、“Exam C1000-112: Fundamentals of Quantum Computation Using Qiskit v0.2X Developer”という試験に合格する必要があります。この試験の概要などが記載された下記URL内では、サンプル問題集のリンクがあります。&#xA;https://www.ibm.com/training/certification/ibm-certified-associate-developer-quantum-computation-using-qiskit-v02x-C0010300&#xA;このサンプル問題集について、こちらのページで1 ~ 10問の解説を行いました。&#xA;このページでは11 ~ 20問までの解説を記載します。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 Amazon Braket学習コース また、AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;問題11: Which two options would place a barrier across all qubits to the QuantumCircuit below?&#xA;qc = QuantumCircuit(3,3) 選択肢:</description>
    </item>
    <item>
      <title>IBM 量子開発者認定資格 sample問題集の解説 その1</title>
      <link>https://schrodinteq.github.io/japanese/ibmcertsample01ja/</link>
      <pubDate>Wed, 18 Sep 2024 17:09:54 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/ibmcertsample01ja/</guid>
      <description>ご注意: このページで紹介している内容は旧バージョンの試験向けです。&#xA;新しいバージョンの試験に対応したサンプル問題解説については、「IBM 量子開発者認定資格 v2.X sample問題集の解説 その1」をご覧ください。&#xA;別ページで量子コンピュータでは、古典コンピュータとは異なるプログラムである、量子プログラムを実装する必要があると記載しました。ここで、この量子プログラムに関する資格「IBM Certified Associate Developer - Quantum Computation using Qiskit v0.2X」をIBMが2021年から提供しています（早い）。 https://www.ibm.com/training/certification/ibm-certified-associate-developer-quantum-computation-using-qiskit-v02x-C0010300&#xA;この資格を取得することでqiskitや量子プログラミングに関する知識を証明することが可能です。&#xA;この認定を得るためには、上記URLに記載がある通り、“Exam C1000-112: Fundamentals of Quantum Computation Using Qiskit v0.2X Developer”という試験に合格する必要があります。 IBMはこの試験に関するsample問題集も公開しており、上記URLサイト内の「Sample Test」で公開されています。 ただ、こちらのSample問題集では解説は特に記載されていないため、なるべく分かりやすく解説を記載します。このページでは1 ~ 10問までの解説を記載しています。11 ~ 20問の解説についてはこちらのページをご参照ください。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 Amazon Braket学習コース また、AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;問題1: Which statement will create a quantum circuit with four quantum bits and four classical bits?</description>
    </item>
    <item>
      <title>量子コンピュータや量子プログラミングとは？</title>
      <link>https://schrodinteq.github.io/japanese/c2q01ja/</link>
      <pubDate>Sun, 28 Jul 2024 10:48:05 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/c2q01ja/</guid>
      <description>古典コンピュータと量子コンピュータ 近年さらに注目度を集めている量子コンピュータですが、私たちが日常的に使用しているコンピュータとの差異はどこにあるのでしょうか？&#xA;1番大きな、そして根本的な差異はビットにあります。私たちが日常的に使用しているコンピュータを、古典コンピュータと呼びましょう。古典コンピュータではビットを0か1どちらかの値を持たせることで、処理を行います。量子コンピューターの話をする際、古典コンピュータのビットはよく古典ビットと呼ばれます。&#xA;私たちが日常的にコンピュータを使用している際、その背後で行われている複雑な処理を意識することはほとんどありません。しかし、ウェブサイトの表示や複雑な計算に至るまで、実際には古典コンピュータが0と1を用いた演算を行うことによって実現されています。ちなみにこの演算処理には、AND、OR、NOTといった論理ゲートを組み合わせた論理回路が用いられています。&#xA;では次に量子コンピュータです。量子コンピュータでの演算には、古典ビットではなく量子ビットと呼ばれるビットが使用されます。qubit（キュービット）とも呼ばれることもあります。この量子ビットは古典ビットと比べると以下2つの大きな違いを持ちます。&#xA;・0と1の重ね合わせ状態としてビットを扱える&#xA;・エンタングルメントを持つ 両方とも古典ビットには無い性質となります。&#xA;量子コンピュータと量子プログラミング 量子コンピュータが注目される理由は、これら量子ビットの性質を活用することで、古典コンピュータでは実現不可能なほど迅速に特定の問題を解決できる可能性があるからです。しかし、この量子ビットの性質を活用しない場合、量子コンピュータでの計算は必ずしも高速になるわけではありません。つまり、古典的なアルゴリズムをそのまま量子コンピュータ上で実行しても、量子ビットの力を引き出すことはできず、量子コンピュータの潜在能力を最大限に引き出すためには量子ビットの特性を活かした「量子回路」を設計し、それに基づく「量子アルゴリズム」を開発することが重要です。&#xA;量子アルゴリズムの研究は非常に活発に進められており、有名なものとしては例えば、Shorのアルゴリズム（素因数分解）やGroverのアルゴリズム（データベース検索）、量子コンピュータを用いて機械学習を行うVQCなどが発案されております。これらのアルゴリズムは、古典コンピュータでは解決が困難な問題に対して、量子コンピュータの力を活かしてより効率的に回答を提供することが期待されています。&#xA;現在ではQiskit、Cirq、QulacsなどのSDKを利用することで、量子アルゴリズムや量子回路を誰でも簡単にプログラムとして記述、実行可能です。これが、いわゆる量子プログラミングです。また、これらアルゴリズムを設計、実装する技術者や、これを用いて量子コンピューター用のアプリケーションを実装する技術者は量子技術者としばし呼ばれます。&#xA;古典コンピュータと量子コンピュータ、どちらが優れている？ よく古典コンピュータと量子コンピュータのどちらが優れているかが議論されますが、まず明確に言えるのは、問題に依存するということです。ある問題に対して、量子ビットや量子アルゴリズムが効果的に活用できる場合、量子コンピュータは古典コンピュータに比べて圧倒的に高速で問題を解決できる可能性があります。 しかし、すべての問題において量子コンピュータが優れているわけではありません。現状では、古典コンピュータの方が効率的に解ける問題ばかりでしょう。&#xA;結局、どちらのコンピュータが優れているかは、問題の特性と、それに適したアルゴリズムの選択に大きく依存するのです。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 量子コンピューターの入門コースを作成しました。このコースにより、量子コンピューターの基礎知識、Qiskitでの実装、量子機械学習について学べます。&#xA;はじめての量子コンピューター入門【基礎知識・Qiskitでの実装・量子機械学習 全て学べる】 Amazon Braket学習コース また、AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;Quantum Computing on AWS for Beginners: Amazon Braket 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！</description>
    </item>
  </channel>
</rss>
