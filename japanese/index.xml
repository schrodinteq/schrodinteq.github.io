<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Schrodin&#39;s Diary on Quantum Computing and Quantum Programming</title>
    <link>https://schrodinteq.github.io/japanese/</link>
    <description>Recent content on Schrodin&#39;s Diary on Quantum Computing and Quantum Programming</description>
    <generator>Hugo</generator>
    <language>japanese</language>
    <lastBuildDate>Mon, 26 May 2025 15:39:10 +0900</lastBuildDate>
    <atom:link href="https://schrodinteq.github.io/japanese/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Amazon Braket SDKをインストールし、Jupyter Notebookで量子回路を実行する</title>
      <link>https://schrodinteq.github.io/japanese/installrunbraketsdk/</link>
      <pubDate>Mon, 26 May 2025 15:39:10 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/installrunbraketsdk/</guid>
      <description>この記事ではAWSが提供する量子コンピューティングSDKである、Amazon Braket SDKをインストールし、Jypyter Notebook上で実行する方法について、説明します。&#xA;Amazon Braket学習コース 本記事で言及されている、Amazon Braketについてより深く学びたい方へ、Amazon Braket学習コースの紹介です。&#xA;https://www.udemy.com/course/quantum-computing-on-aws-for-beginners-amazon-braket/?referralCode=F361C3FD774489A1B5B8 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;Amazon Braket SDKをインストールし、Jupyter Notebookで量子回路を実行する Amazon Braket SDKはAWSが提供する量子コンピューティングSDKで、pythonにより実行可能です。このSDKにより量子回路の記述や、実行が可能となります。&#xA;Amazon Braket SDKはAmazon Braket NotebookというAWS上のJupyter Notebookインスタンスから簡単に実行可能ですが、今回はこのAmazon Braket SDKを自分のPCや、サーバに直接インストールして実行する方法について説明します。&#xA;環境はWindows 10で、pythonはPython 3.9.9を利用しています。 まずはうまくいかなかった例についてです。 以下コマンドでAmazon Braket SDKをインストールしました。&#xA;pip install amazon-braket-sdk[braket-air,notebook] jupyter notebookコマンドで環境を起動後、以下コードを実行してみます。&#xA;from braket.circuits import Circuit from braket.devices import LocalSimulator circuit = Circuit().h(0).measure(0) device = LocalSimulator() result = device.run(circuit, shots=1000).result() counts = result.measurement_counts print(counts) 結果は以下のようなエラーメッセージで失敗します。&#xA;ModuleNotFoundError: No module named &amp;#39;braket&amp;#39; 次に成功例を記載します。以下で環境を用意します。&#xA;pip install amazon-braket-sdk notebook jupyter notebookコマンドで環境を起動後、同じコードを実行してみます。 すると以下の様に表示され、無事量子回路が実行されていることが確認できました。</description>
    </item>
    <item>
      <title>Qiskit 2.0をインストールして簡単な量子回路を実行する</title>
      <link>https://schrodinteq.github.io/japanese/qiskit20/</link>
      <pubDate>Thu, 22 May 2025 17:36:41 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/qiskit20/</guid>
      <description>Qiskit 2.0がリリースされました。この記事ではqiskit 2.0.1で簡単な量子回路を実行する方法を説明します。&#xA;Amazon Braket学習コース AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;https://www.udemy.com/course/quantum-computing-on-aws-for-beginners-amazon-braket/?referralCode=F361C3FD774489A1B5B8 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;Qiskit試験対策問題集 qiskitについての資格試験をIBMが提供しています。&#xA;この資格を取得することでqiskitや量子プログラミングに関する知識を証明することが可能です。 こちらの資格取得を目指される方のため、Udemyというサイト上にて日本語版、英語版で問題集を作りました！解説もなるべくわかりやすく作成いたしましたので、是非是非ご活用ください。&#xA;英語版問題集 https://www.udemy.com/course/ibm-certified-quantum-computation-qiskit-practice-exams/?referralCode=3B3263DF800E05439AD2 日本語版問題集 https://www.udemy.com/course/ibm-certified-quantum-computation-qiskit-jp/?referralCode=7D18ADD30A495E12120B qiskit 2.0.1をインストールして簡単な量子回路を実行する この記事を書いてる時点での最新版であるqiskitのバージョンは2.0.1であったため、これをインストールし、簡単な量子回路を実行します。 環境は以下の通り用意しました。&#xA;pip install qiskit==2.0.1 notebook numpy 今回の記事ではStatevectorSamplerを用いて量子回路を実行します。その他必要となるモジュールと合わせてimportしておきます。&#xA;from qiskit.circuit import ( Parameter, QuantumCircuit ) from qiskit.primitives import StatevectorSampler samplerを定義します。&#xA;sampler = StatevectorSampler() いつも通り量子回路を定義します。今回はベルの回路を定義してます。&#xA;qc = QuantumCircuit(2, 2) qc.h(0) qc.cx(0, 1) qc.measure([0,1], [0,1]) Qiskitでは量子回路と同時に複数のパラメータを定義し、samplerで一気に実行可能です。 ただし、今回はパラメータ依存のゲートもないため、パラメータを定義しないNoneとして実行します。&#xA;pub = (qc, None) job = sampler.run([pub], shots=100) 以下の様に結果を確認できます。&#xA;result = job.result()[0] print(result.data.c.get_counts()) # {&amp;#39;11&amp;#39;: 53, &amp;#39;00&amp;#39;: 47} では次に複数のパラメータで一気に量子回路を実行してみましょう。 以下のようにParameter x, yに依存し回転を施すrx, ryゲートを使った量子回路を定義します。</description>
    </item>
    <item>
      <title>Amazon BraketでQiskitを利用する</title>
      <link>https://schrodinteq.github.io/japanese/awsbraketqiskit/</link>
      <pubDate>Tue, 20 May 2025 11:47:16 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/awsbraketqiskit/</guid>
      <description>この記事ではAWSが提供する量子コンピューティングサービスの1つである、Amazon Braket NotebookからQiskitを利用する方法について説明します。&#xA;Amazon Braket学習コース AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;https://www.udemy.com/course/quantum-computing-on-aws-for-beginners-amazon-braket/?referralCode=F361C3FD774489A1B5B8 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;Amazon Braket NotebookからQiskitを実行する AWSが提供する量子コンピューティングサービスの1つである、Amazon Braket Notebookインスタンスには、Amazon Braket SDK、Qiskit、Pennylaneなどの量子コンピューティングSDKが既に利用できる状態でインストールされています。 今回はQiskitを用いて簡単な回路を実行します。 まずはAmazon Braket Notebookインスタンスを起動し、新しいファイルを開きます。 Amazon Braket Notebookインスタンスは、起動時間に応じて料金が発生するので注意しましょう。 以下の様に通常のQiskitと同様にモジュールをインポートできます。&#xA;import qiskit from qiskit import QuantumCircuit この記事を書いている時点では、Qiskit1.2.0がデフォルトでインストールされています。&#xA;print(qiskit.__version__) #1.2.0 量子回路もいつも通り定義できます。今回はベルの回路を作成しています。&#xA;circuit = QuantumCircuit(2) circuit.h(0) circuit.cx(0, 1) 量子回路の実行方法は、通常のQiskitと記載の仕方が異なります。以下はローカルシミュレータ利用時のコードです。 local_simulatorという変数にバックエンドを定義し、実行しています。100回の実行としています。&#xA;from qiskit_braket_provider import BraketLocalBackend local_simulator = BraketLocalBackend() local_task = local_simulator.run(circuit, shots=100) 結果の確認方法は通常のQiskitと同様です。&#xA;print(local_task.result().get_counts()) #{&amp;#39;11&amp;#39;: 44, &amp;#39;00&amp;#39;: 56} ヒストグラムもいつも通り以下で確認できます。&#xA;from qiskit.visualization import plot_histogram plot_histogram(local_task.result().get_counts()) Amazon Braket managedシミュレータを扱いたい場合、利用可能なシミュレータは以下で確認可能です。</description>
    </item>
    <item>
      <title>Amazon BraketのAccessDeniedException</title>
      <link>https://schrodinteq.github.io/japanese/braketexrole/</link>
      <pubDate>Mon, 19 May 2025 10:58:25 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/braketexrole/</guid>
      <description>Amazon Braket学習コース AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;https://www.udemy.com/course/quantum-computing-on-aws-for-beginners-amazon-braket/?referralCode=F361C3FD774489A1B5B8 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;Amazon BraketのAccessDeniedException Amazon BraketでSV1、 TN1、 DM1シミュレータや量子コンピュータを実行しようとした際に以下のようなエラーが出力されることがあります。&#xA;--------------------------------------------------------------------------- AccessDeniedException Traceback (most recent call last) Cell In[12], line 6 3 ghz = ghz_circuit(n_qubits) 5 # run GHZ circuit on SV1 ----&amp;gt; 6 result = device.run(ghz, shots=1000).result() 7 counts = result.measurement_counts 8 print(counts) File ~/anaconda3/envs/Braket/lib/python3.10/site-packages/braket/aws/aws_device.py:207, in AwsDevice.run(self, task_specification, s3_destination_folder, shots, poll_timeout_seconds, poll_interval_seconds, inputs, gate_definitions, reservation_arn, *aws_quantum_task_args, **aws_quantum_task_kwargs) 205 if self._noise_model: 206 task_specification = self._apply_noise_model_to_circuit(task_specification) --&amp;gt; 207 return AwsQuantumTask.</description>
    </item>
    <item>
      <title>Amazon Braketのメモリ不足によるエラー</title>
      <link>https://schrodinteq.github.io/japanese/braketmemerr/</link>
      <pubDate>Thu, 15 May 2025 21:25:15 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/braketmemerr/</guid>
      <description>Amazon Braket学習コース AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;https://www.udemy.com/course/quantum-computing-on-aws-for-beginners-amazon-braket/?referralCode=F361C3FD774489A1B5B8 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;Amazon Braketローカルシミュレータのメモリ不足によるエラー AWSの量子コンピューティングサービスであるAmazon Braketで、ローカルシミュレータを実行すると以下のエラーが出力される場合があります。&#xA;--------------------------------------------------------------------------- MemoryError Traceback (most recent call last) Cell In[11], line 2 1 device = LocalSimulator() ----&amp;gt; 2 result = device.run(myqc, shots=1000).result() 3 counts = result.measurement_counts 4 plt.bar(counts.keys(), counts.values()) File ~/anaconda3/envs/Braket/lib/python3.10/site-packages/braket/devices/local_simulator.py:126, in LocalSimulator.run(self, task_specification, shots, inputs, *args, **kwargs) 124 task_specification = self._apply_noise_model_to_circuit(task_specification) 125 payload = self._construct_payload(task_specification, inputs, shots) --&amp;gt; 126 result = self._delegate.run(payload, *args, shots=shots, **kwargs) 127 return LocalQuantumTask(self._to_result_object(result)) File ~/anaconda3/envs/Braket/lib/python3.</description>
    </item>
    <item>
      <title>Amazon Braketとは</title>
      <link>https://schrodinteq.github.io/japanese/whatisamazonbraket/</link>
      <pubDate>Sat, 10 May 2025 19:02:57 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/whatisamazonbraket/</guid>
      <description>この記事ではAWSが提供する量子コンピューティングサービスである、Amazon Braketの概要について、個人的に感じるメリットも記載しながら説明します。&#xA;Amazon Braket学習コース AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;https://www.udemy.com/course/quantum-computing-on-aws-for-beginners-amazon-braket/?referralCode=F361C3FD774489A1B5B8 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;Amazon Braketの概要 Amazon BraketはAWSが提供する量子コンピューティングサービスで、以下の機能を提供します。&#xA;Amazon Braket Notebookの利用 Amazon Braketマネージドシミュレータの実行 複数のプロバイダーが提供する量子コンピュータの実行 ハイブリッドジョブ機能 アルゴリズムライブラリの利用 それぞれの項目についてより具体的な内容を記載します。 Amazon Braket Notebookの利用 Amazon Braketでは、Amazon Braket Notebookインスタンスを作成、起動し、利用することができます。 これにより簡単にJupyter Notebookベースの開発環境を用意することができ、量子プログラミングをすぐさま始められます。&#xA;特にこの環境ではQiskitやPennyLane、Amazon Braket SDKなどの量子コンピューティングSDKが起動直後からほ利用できる状態でインストールされているという点が便利です。 量子コンピューティングSDKの発展は著しく、バージョン差異による影響でコードを書いてもエラーが発生するケースがよく見受けられます。 Amazon Braket Notebookでは、起動後のインスタンスに既に用意されているチュートリアルに従えば、確実にエラー無く量子回路を実行することができます。 この扱いやすさは一つのメリットと言えるでしょう。&#xA;さらに、このAmazon Braket Notebookから、後ほど紹介するAmazon Braketマネージドシミュレータの実行や量子コンピュータが簡単に実行できるのも利点です。 また料金について、Amazon braket notebookの起動時間に依存して課金が発生する仕組みとなっているようで起動時間に注意が必要そうです。 Amazon Braketマネージドシミュレータの実行 先ほど紹介したAmazon Braket Notebookのローカルシミュレータを利用すれば量子回路は簡単に実行可能です。 しかしながら、量子回路における量子ビットを増やしていった時にローカルシミュレータでは実行しきれないケースも出てくるかと思います。 ここで、Amazon Braketマネージドシミュレータを用いることで、Amazon Braket Notebookや、ローカルのPCでは実行できないような規模の量子回路を実行可能となります。 利用可能なシミュレータとざっくりの説明は以下の通りです。&#xA;Simulator Description SV1 (State Vector Simulator) ローカルシミュレータより多くの量子ビットでシミュレート可能 TN1 (Tensor Network Simulator) SV1より大規模な量子ビットでシミュレート可能 DM1 (Density Matrix Simulator) ノイズあり、つまりより本物の量子コンピュータに近い環境でシミュレート可能 料金については、どのシミュレータも実行時間に依存して料金が発生する仕組みとなっているようです。 複数のプロバイダーが提供する量子コンピュータの実行 AWSマネージドシミュレータと同様にAmazon Braket Notebook経由で、簡単に様々な種類の量子コンピュータが実行可能となります。 2025年5月現在、以下プロバイダーの量子コンピュータを利用できます。</description>
    </item>
    <item>
      <title>pythonの仮想環境により任意のqiskitのバージョンを実行する。</title>
      <link>https://schrodinteq.github.io/japanese/venv/</link>
      <pubDate>Thu, 17 Apr 2025 20:34:31 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/venv/</guid>
      <description>Qiskit試験対策問題集 qiskitについての資格試験をIBMが提供しています。&#xA;この資格を取得することでqiskitや量子プログラミングに関する知識を証明することが可能です。 こちらの資格取得を目指される方のため、Udemyというサイト上にて日本語版、英語版で問題集を作りました！解説もなるべくわかりやすく作成いたしましたので、是非是非ご活用ください。&#xA;英語版問題集 https://www.udemy.com/course/ibm-certified-quantum-computation-qiskit-practice-exams/?referralCode=3B3263DF800E05439AD2 日本語版問題集 https://www.udemy.com/course/ibm-certified-quantum-computation-qiskit-jp/?referralCode=7D18ADD30A495E12120B Amazon Braket学習コース AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;https://www.udemy.com/course/quantum-computing-on-aws-for-beginners-amazon-braket/?referralCode=F361C3FD774489A1B5B8 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;任意のqiskitのバージョンの実行 IBMが提供している量子コンピュータに関する資格「IBM Certified Associate Developer - Quantum Computation using Qiskit v0.2X」についてサンプル問題が公開されています。このサンプル問題集には以下のコードが記載されています。&#xA;from qiskit import QuantumCircuit, execute, BasicAer backend = BasicAer.get_backend(&amp;#39;qasm_simulator&amp;#39;) qc = QuantumCircuit(3) execute(qc, backend, shots=1024, coupling_map=[[0,1], [1,2]]) これを実行すると次のようなエラーが出ます。&#xA;ImportError: cannot import name &amp;#39;execute&amp;#39; from &amp;#39;qiskit&amp;#39; もしくは&#xA;ImportError: cannot import name &amp;#39;BasicAer&amp;#39; from &amp;#39;qiskit&amp;#39; 他のサンプルコードを実行した際も以下のようなエラーが出ます。&#xA;from qiskit import QuantumCircuit, Aer, execute from math import sqrt qc = QuantumCircuit(2) v = [1/sqrt(2), 0, 0, 1/sqrt(2)] qc.</description>
    </item>
    <item>
      <title>IBM 量子開発者認定資格 sample問題集の解説 その2</title>
      <link>https://schrodinteq.github.io/japanese/ibmcertsample02ja/</link>
      <pubDate>Sat, 12 Oct 2024 20:23:00 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/ibmcertsample02ja/</guid>
      <description>IBMが提供している量子コンピュータに関する資格「IBM Certified Associate Developer - Quantum Computation using Qiskit v0.2X」を取得するためには、“Exam C1000-112: Fundamentals of Quantum Computation Using Qiskit v0.2X Developer”という試験に合格する必要があります。この試験の概要などが記載された下記URL内では、サンプル問題集のリンクがあります。&#xA;https://www.ibm.com/training/certification/ibm-certified-associate-developer-quantum-computation-using-qiskit-v02x-C0010300&#xA;このサンプル問題集について、こちらのページで1 ~ 10問の解説を行いました。&#xA;このページでは11 ~ 20問までの解説を記載します。&#xA;また、試験対策用の追加の問題集としては下記のような問題集も是非是非、ご活用ください。&#xA;英語版問題集 https://www.udemy.com/course/ibm-certified-quantum-computation-qiskit-practice-exams/?referralCode=3B3263DF800E05439AD2 日本語版問題集 https://www.udemy.com/course/ibm-certified-quantum-computation-qiskit-jp/?referralCode=7D18ADD30A495E12120B Amazon Braket学習コース また、AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;https://www.udemy.com/course/quantum-computing-on-aws-for-beginners-amazon-braket/?referralCode=F361C3FD774489A1B5B8 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;問題11: Which two options would place a barrier across all qubits to the QuantumCircuit below?&#xA;qc = QuantumCircuit(3,3) 選択肢:&#xA;A. qc.barrier(qc) B. qc.barrier([0,1,2]) C. qc.barrier() D. qc.barrier(3) E. qc.barrier_all() 回答: B,C&#xA;解説: 次のうちどのコードが、全ての量子ビットにバリアーを置くかという問題ですね。バリアーはゲートの間に置かれることで、それぞれのゲートが順番に実行されることを保証する役割を果たします。問題文のコードではすでに3つの量子ビット、古典ビットが定義されています。一つずつ選択肢を見ていきましょう。</description>
    </item>
    <item>
      <title>IBM 量子開発者認定資格 sample問題集の解説 その1</title>
      <link>https://schrodinteq.github.io/japanese/ibmcertsample01ja/</link>
      <pubDate>Wed, 18 Sep 2024 17:09:54 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/ibmcertsample01ja/</guid>
      <description>別ページで量子コンピュータでは、古典コンピュータとは異なるプログラムである、量子プログラムを実装する必要があると記載しました。ここで、この量子プログラムに関する資格「IBM Certified Associate Developer - Quantum Computation using Qiskit v0.2X」をIBMが2021年から提供しています（早い）。 https://www.ibm.com/training/certification/ibm-certified-associate-developer-quantum-computation-using-qiskit-v02x-C0010300&#xA;この資格を取得することでqiskitや量子プログラミングに関する知識を証明することが可能です。&#xA;この認定を得るためには、上記URLに記載がある通り、“Exam C1000-112: Fundamentals of Quantum Computation Using Qiskit v0.2X Developer”という試験に合格する必要があります。 IBMはこの試験に関するsample問題集も公開しており、上記URLサイト内の「Sample Test」で公開されています。 ただ、こちらのSample問題集では解説は特に記載されていないため、なるべく分かりやすく解説を記載します。このページでは1 ~ 10問までの解説を記載しています。11 ~ 20問の解説についてはこちらのページをご参照ください。&#xA;試験対策としては下記のような問題集も是非是非、ご活用ください。&#xA;英語版問題集 https://www.udemy.com/course/ibm-certified-quantum-computation-qiskit-practice-exams/?referralCode=3B3263DF800E05439AD2 日本語版問題集 https://www.udemy.com/course/ibm-certified-quantum-computation-qiskit-jp/?referralCode=7D18ADD30A495E12120B Amazon Braket学習コース また、AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;https://www.udemy.com/course/quantum-computing-on-aws-for-beginners-amazon-braket/?referralCode=F361C3FD774489A1B5B8 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！&#xA;問題1: Which statement will create a quantum circuit with four quantum bits and four classical bits?&#xA;選択肢:&#xA;A. QuantumCircuit(4, 4) B. QuantumCircuit(4) C. QuantumCircuit(QuantumRegister(4, &amp;lsquo;qr0&amp;rsquo;), QuantumRegister(4, &amp;lsquo;cr1&amp;rsquo;)) D. QuantumCircuit([4, 4]) 回答: A</description>
    </item>
    <item>
      <title>量子コンピュータや量子プログラミングとは？</title>
      <link>https://schrodinteq.github.io/japanese/c2q01ja/</link>
      <pubDate>Sun, 28 Jul 2024 10:48:05 +0900</pubDate>
      <guid>https://schrodinteq.github.io/japanese/c2q01ja/</guid>
      <description>古典コンピュータと量子コンピュータ 近年さらに注目度を集めている量子コンピュータですが、私たちが日常的に使用しているコンピュータとの差異はどこにあるのでしょうか？&#xA;1番大きな、そして根本的な差異はビットにあります。私たちが日常的に使用しているコンピュータを、古典コンピュータと呼びましょう。古典コンピュータではビットを0か1どちらかの値を持たせることで、処理を行います。量子コンピューターの話をする際、古典コンピュータのビットはよく古典ビットと呼ばれます。&#xA;私たちが日常的にコンピュータを使用している際、その背後で行われている複雑な処理を意識することはほとんどありません。しかし、ウェブサイトの表示や複雑な計算に至るまで、実際には古典コンピュータが0と1を用いた演算を行うことによって実現されています。ちなみにこの演算処理には、AND、OR、NOTといった論理ゲートを組み合わせた論理回路が用いられています。&#xA;では次に量子コンピュータです。量子コンピュータでの演算には、古典ビットではなく量子ビットと呼ばれるビットが使用されます。qubit（キュービット）とも呼ばれることもあります。この量子ビットは古典ビットと比べると以下2つの大きな違いを持ちます。&#xA;・0と1の重ね合わせ状態としてビットを扱える&#xA;・エンタングルメントを持つ 両方とも古典ビットには無い性質となります。&#xA;量子コンピュータと量子プログラミング 量子コンピュータが注目される理由は、これら量子ビットの性質を活用することで、古典コンピュータでは実現不可能なほど迅速に特定の問題を解決できる可能性があるからです。しかし、この量子ビットの性質を活用しない場合、量子コンピュータでの計算は必ずしも高速になるわけではありません。つまり、古典的なアルゴリズムをそのまま量子コンピュータ上で実行しても、量子ビットの力を引き出すことはできず、量子コンピュータの潜在能力を最大限に引き出すためには量子ビットの特性を活かした「量子回路」を設計し、それに基づく「量子アルゴリズム」を開発することが重要です。&#xA;量子アルゴリズムの研究は非常に活発に進められており、有名なものとしては例えば、Shorのアルゴリズム（素因数分解）やGroverのアルゴリズム（データベース検索）、量子コンピュータを用いて機械学習を行うVQCなどが発案されております。これらのアルゴリズムは、古典コンピュータでは解決が困難な問題に対して、量子コンピュータの力を活かしてより効率的に回答を提供することが期待されています。&#xA;現在ではQiskit、Cirq、QulacsなどのSDKを利用することで、量子アルゴリズムや量子回路を誰でも簡単にプログラムとして記述、実行可能です。これが、いわゆる量子プログラミングです。また、これらアルゴリズムを設計、実装する技術者や、これを用いて量子コンピューター用のアプリケーションを実装する技術者は量子技術者としばし呼ばれます。&#xA;古典コンピュータと量子コンピュータ、どちらが優れている？ よく古典コンピュータと量子コンピュータのどちらが優れているかが議論されますが、まず明確に言えるのは、問題に依存するということです。ある問題に対して、量子ビットや量子アルゴリズムが効果的に活用できる場合、量子コンピュータは古典コンピュータに比べて圧倒的に高速で問題を解決できる可能性があります。 しかし、すべての問題において量子コンピュータが優れているわけではありません。現状では、古典コンピュータの方が効率的に解ける問題ばかりでしょう。&#xA;結局、どちらのコンピュータが優れているかは、問題の特性と、それに適したアルゴリズムの選択に大きく依存するのです。&#xA;IBMの量子技術者認定試験について 本ブログで紹介したqiskitについての資格試験をIBMが提供しています。&#xA;https://www.ibm.com/training/certification/ibm-certified-associate-developer-quantum-computation-using-qiskit-v02x-C0010300&#xA;この資格を取得することでqiskitや量子プログラミングに関する知識を証明することが可能です。 こちらの資格取得を目指される方のため、Udemyというサイト上にて日本語版、英語版で問題集を作りました！解説もなるべくわかりやすく作成いたしましたので、是非是非ご活用ください。&#xA;英語版問題集 https://www.udemy.com/course/ibm-certified-quantum-computation-qiskit-practice-exams/?referralCode=3B3263DF800E05439AD2 日本語版問題集 https://www.udemy.com/course/ibm-certified-quantum-computation-qiskit-jp/?referralCode=7D18ADD30A495E12120B Amazon Braket学習コース また、AWSでの量子コンピューティングサービスであるAmazon braketについての学習コースを作成しました。&#xA;https://www.udemy.com/course/quantum-computing-on-aws-for-beginners-amazon-braket/?referralCode=F361C3FD774489A1B5B8 量子コンピュータやAWSの知識が無い方でも学び始められ、最終的には量子機械学習についても学べます。 こちらも利用し、量子技術のスキルを身につけましょう！</description>
    </item>
  </channel>
</rss>
